{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/background-page/background-communication/chrome-browser/chrome-background-communication.ts","./src/app/background-page/background.component.ts","./src/app/background-page/background.component.html","./src/app/background-page/background.module.ts","./src/app/background-page/convolutional-neural-network/convolutional-neural-network-settings/convolutional-neural-network-settings.ts","./src/app/background-page/convolutional-neural-network/convolutional-neural-network.ts","./src/app/background-page/load-image/load-image.ts","./src/app/interfaces/notifications.ts","./src/app/navbar/nav-bar.component.ts","./src/app/navbar/nav-bar.component.html","./src/app/services/browser-user-interface/browser-user-interface.service.ts","./src/app/services/browser-user-interface/chrome-browser/chrome-user-interface-communication.ts","./src/environments/environment.ts","./src/main.ts","./src/utils/browser-communication.ts","./src/utils/module.ts","./src/utils/user-interface-communication.ts","node-fetch (ignored)","util (ignored)","crypto (ignored)","string_decoder (ignored)","fs (ignored)"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from \"@angular/core\"\nimport {RouterModule, Routes} from \"@angular/router\"\nimport {BackgroundComponent} from \"./background-page/background.component\"\n\n\nconst routes: Routes = [\n    {path: \"filters\", loadChildren: () => import(\"./filters-page/filters.module\").then(m => m.FiltersModule)},\n    {path: \"models\", loadChildren: () => import(\"./models-page/cnn-models.module\").then(m => m.CnnModelsModule)},\n    {path: \"options\", loadChildren: () => import(\"./options-page/options-page.module\").then(m => m.OptionsPageModule)},\n    {path: \"background\", component: BackgroundComponent},\n]\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {useHash: true})],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Component, OnInit} from \"@angular/core\"\n\n\n@Component({\n    selector: \"app-root\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.css\"]\n})\nexport class AppComponent implements OnInit {\n    title = \"nan-chrome-extension\"\n\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n\n\n    }\n}\n","<app-nav-bar></app-nav-bar>\n\n<router-outlet></router-outlet>\n","import {BrowserModule} from \"@angular/platform-browser\"\nimport {NgModule} from \"@angular/core\"\n\nimport {AppRoutingModule} from \"./app-routing.module\"\nimport {AppComponent} from \"./app.component\"\nimport {NavBarComponent} from \"./navbar/nav-bar.component\"\n\nimport {BrowserUserInterfaceService} from \"./services/browser-user-interface/browser-user-interface.service\"\nimport {BackgroundModule} from \"./background-page/background.module\"\n\n\n// @ts-ignore\n@NgModule({\n    declarations: [\n        AppComponent,\n        NavBarComponent,\n    ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        BackgroundModule,\n    ],\n    providers: [BrowserUserInterfaceService],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {\n    ClassNameUrlsNotification,\n    CnnModelSettingNotification,\n    ContentNotification,\n    LocalModelInputNotification,\n    Notification,\n    NotificationTypes,\n    TensorFlowHubModelNotification\n} from \"../../../interfaces/notifications\"\nimport {BrowserCommunication} from \"../../../../utils/browser-communication\"\nimport {USER_INTERFACE_COMMUNICATION_ID} from \"../../../../utils/user-interface-communication\"\nimport Port = chrome.runtime.Port\n\nexport const GET_CURRENT_SETTINGS_MESSAGE = \"get current cnn settings\"\n\nexport const GET_LOCAL_CLASS_NAME_URLS = \" get local class name urls\"\n\nexport class ChromeBackgroundCommunication extends BrowserCommunication <Notification, Notification> {\n\n    constructor() {\n        super()\n        this.ports = {}\n\n    }\n\n\n    private static erros = {\n        enableContentScript: new Error(\"Must enable Chrome Content Scripts\"),\n        enableStorage: new Error(\"Must add Storage permission\"),\n        uuidUndefined: new Error(\"UUID undefined\"),\n        urlsUndefined: new Error(\"URLS undefined\")\n    }\n\n    private callbacks = {\n        [NotificationTypes.Notification]: this.simpleNotifications.bind(this),\n        [NotificationTypes.ContentNotification]: this.notifyImages.bind(this),\n        [NotificationTypes.TensorFlowHubModelNotification]: this.notifyCnnSettings.bind(this),\n        [NotificationTypes.LocalModelInputNotification]: this.loadLocalModel.bind(this)\n    }\n\n    private storeKey = \"settings\"\n\n    private readonly ports: { [key: string]: Port }\n\n    private currentUserInterfacePort: Port\n\n    private localClassesNames = {\n        [\"imagenet-ilsvrc-2012-cls\"]: chrome.runtime.getURL(\"assets/modelJS/Image-net-class.json\")\n    }\n\n\n    checkPermissions() {\n        if (chrome.runtime === undefined || chrome.runtime.getURL === undefined) {\n            throw ChromeBackgroundCommunication.erros.enableContentScript\n        }\n\n        if (chrome.storage === undefined) {\n            throw ChromeBackgroundCommunication.erros.enableStorage\n        }\n    }\n\n    tryToStart() {\n        console.log(\"stating browser listener ...\")\n        try {\n            this.checkPermissions()\n            chrome.runtime.onConnect.addListener(this.onConnect.bind(this))\n            this.loadLocalData()\n            this.sendClassNameUrls()\n        } catch (e) {\n            console.log(\"Unable to  start runtime\")\n            console.log(e)\n        }\n\n\n    }\n\n\n    complete() {\n    }\n\n    error(e) {\n    }\n\n    next(notification: Notification) {\n\n        if (this.ports[notification.id]) {\n            this.ports[notification.id].postMessage(notification)\n        }\n\n\n        if (notification.type === NotificationTypes.TensorFlowHubModelNotification) {\n            console.log(\"Chrome Background salvando Notificação\", notification)\n            this.storeSettings(notification as TensorFlowHubModelNotification)\n        }\n\n    }\n\n\n    private onConnect(port: Port) {\n\n        this.ports[port.name] = port\n\n        port.onMessage.addListener(this.listener.bind(this))\n        port.onDisconnect.addListener(this.disconnect.bind(this))\n\n    }\n\n    private listener(notification: Notification, port: Port) {\n\n        if (this.callbacks[notification.type]) {\n            this.callbacks[notification.type](notification, port)\n        }\n\n    }\n\n    private disconnect(port: Port) {\n        delete this.ports[port.name]\n    }\n\n\n    private notifyImages(notification: ContentNotification, port: Port) {\n\n        const urlImages = notification.urlImages\n\n        if (port === undefined) {\n            throw ChromeBackgroundCommunication.erros.uuidUndefined\n        }\n\n        if (urlImages === undefined) {\n            throw ChromeBackgroundCommunication.erros.urlsUndefined\n        }\n\n        for (const url of urlImages) {\n            if (url) {\n                this.subject.next({message: url, id: port.name, type: NotificationTypes.ImageSourceNotification} as Notification)\n            }\n        }\n\n    }\n\n    private notifyCnnSettings(notification: TensorFlowHubModelNotification, port: Port) {\n\n        notification.id = port.name\n\n\n        this.subject.next(notification)\n    }\n\n\n    private loadLocalData() {\n        chrome.storage.local.get([this.storeKey], this.callbackStorage.bind(this))\n    }\n\n    private callbackStorage(result: any) {\n\n        const notification: TensorFlowHubModelNotification = {\n            ...result.settings,\n            type: NotificationTypes.TensorFlowHubModelNotification,\n            id: USER_INTERFACE_COMMUNICATION_ID\n        }\n\n        if (result.settings) {\n            this.subject.next(notification)\n            this.next(notification)\n        } else if (this.currentUserInterfacePort) {\n            this.next({\n                id: this.currentUserInterfacePort.name,\n                cnnModelHub: {},\n                classNames: {},\n                type: NotificationTypes.TensorFlowHubModelNotification\n            } as TensorFlowHubModelNotification)\n        }\n\n\n    }\n\n    private storeSettings(settings: TensorFlowHubModelNotification) {\n        chrome.storage.local.set({[this.storeKey]: settings})\n    }\n\n\n    private simpleNotifications(notification: Notification, port: Port) {\n        if (notification.message === GET_CURRENT_SETTINGS_MESSAGE) {\n            this.currentUserInterfacePort = port\n            this.loadLocalData()\n        } else if (notification.message === GET_LOCAL_CLASS_NAME_URLS) {\n            this.sendClassNameUrls()\n        }\n\n\n    }\n\n    private sendClassNameUrls() {\n        this.subject.next({\n            type: NotificationTypes.ClassNameUrlsNotification,\n            urls: this.localClassesNames\n        } as ClassNameUrlsNotification)\n    }\n\n\n    private loadLocalModel(notification: LocalModelInputNotification, port: Port) {\n\n        this.subject.next(notification)\n    }\n\n\n}\n","import {Component} from \"@angular/core\"\nimport {ConvolutionalNeuralNetwork} from \"./convolutional-neural-network/convolutional-neural-network\"\nimport {LoadImage} from \"./load-image/load-image\"\nimport {ConvolutionalNeuralNetworkSettings} from \"./convolutional-neural-network/convolutional-neural-network-settings/convolutional-neural-network-settings\"\nimport {ChromeBackgroundCommunication} from \"./background-communication/chrome-browser/chrome-background-communication\"\n\n@Component({\n  selector: \"app-background\",\n  templateUrl: \"./background.component.html\",\n  // styleUrls: ['./models-page.component.css']\n\n})\nexport class BackgroundComponent {\n\n  constructor() {\n    this.cnnSettings = new ConvolutionalNeuralNetworkSettings()\n    this.cnn = new ConvolutionalNeuralNetwork()\n    this.loadImage = new LoadImage()\n    this.browser = BackgroundComponent.selectBrowserBackgroundCommunication()\n\n    this.subscribes()\n\n    this.startFilter()\n\n\n  }\n\n  private cnn: ConvolutionalNeuralNetwork\n  private loadImage: LoadImage\n  private browser: ChromeBackgroundCommunication\n  private cnnSettings: ConvolutionalNeuralNetworkSettings\n\n\n  static selectBrowserBackgroundCommunication(): ChromeBackgroundCommunication {\n\n    if (chrome) {\n      return new ChromeBackgroundCommunication()\n    }\n    else {\n      throw new Error(\"Not implemented\")\n    }\n\n  }\n\n  private startFilter() {\n\n    this.browser.tryToStart()\n\n\n  }\n\n  private subscribes() {\n    this.cnn.addObserver(this.browser)\n    this.cnn.addObserver(this.loadImage)\n    this.cnn.addObserver(this.cnnSettings)\n\n    this.loadImage.addObserver(this.browser)\n    this.loadImage.addObserver(this.cnnSettings)\n\n    this.browser.addObserver(this.cnn)\n    this.browser.addObserver(this.cnnSettings)\n\n    this.cnnSettings.addObserver(this.browser)\n  }\n\n}\n","<p>background works!</p>\n","import {NgModule} from \"@angular/core\"\nimport {CommonModule} from \"@angular/common\"\nimport {BackgroundComponent} from \"./background.component\"\n\n\n@NgModule({\n  declarations: [BackgroundComponent],\n  imports: [\n    CommonModule,\n  ],\n  exports: [BackgroundComponent]\n})\nexport class BackgroundModule {\n}\n","import * as tf from \"@tensorflow/tfjs\"\nimport Module from \"../../../../utils/module\"\nimport {\n    ClassNameUrlsNotification,\n    CnnModelSettingNotification,\n    InputShapeNotification,\n    LocalModelInputNotification,\n    Notification,\n    NotificationTypes,\n    TensorFlowHubModelNotification\n} from \"../../../interfaces/notifications\"\nimport {ClassNames} from \"../../../interfaces/class-names\"\nimport * as JSZIP from \"jszip\"\nimport {USER_INTERFACE_COMMUNICATION_ID} from \"../../../../utils/user-interface-communication\"\n\n\nexport class ConvolutionalNeuralNetworkSettings extends Module<Notification, Notification> {\n\n    constructor() {\n        super()\n    }\n\n    private callbacks = {\n        [NotificationTypes.TensorFlowHubModelNotification]: this.hubModelNotification.bind(this),\n        [NotificationTypes.ClassNameUrlsNotification]: this.classNameUrlsNotification.bind(this),\n        [NotificationTypes.LocalModelInputNotification]: this.loadLocalCnn.bind(this)\n    }\n\n    private currentSettings: TensorFlowHubModelNotification\n\n    private localClassesNames: { [key: string]: string }\n\n    private static async xmlRequest(path: string, type?: XMLHttpRequestResponseType): Promise<any> {\n\n        return new Promise<any>((resolve, reject) => {\n            const xhr = new XMLHttpRequest()\n\n            xhr.addEventListener(\"load\", () => {\n\n                resolve(xhr.response)\n            })\n\n            xhr.addEventListener(\"error\", () => {\n                reject(`Error not solver request`)\n            })\n            xhr.open(\"GET\", path, true)\n            if (type) {\n                xhr.responseType = type\n            }\n            xhr.send()\n        })\n\n    }\n\n    private async loadCnnModel(tensorHubUrl: string): Promise<tf.GraphModel | undefined> {\n\n        if (!this.needToLoadModel(tensorHubUrl)) {\n            return undefined\n        }\n\n\n        console.log(\"Loading model...\")\n\n        const startTime = performance.now()\n\n        const cnnModel = await tf.loadGraphModel(tensorHubUrl, {fromTFHub: true})\n\n        console.log(`Model loaded  in ${Math.floor(performance.now() - startTime)} ms...`)\n\n        return cnnModel\n    }\n\n\n    next(message: Notification) {\n\n\n        if (this.callbacks[message.type]) {\n            this.callbacks[message.type](message)\n        }\n\n\n    }\n\n\n    complete(): void {\n    }\n\n    error(e): void {\n    }\n\n    private async hubModelNotification(message: TensorFlowHubModelNotification) {\n\n        if (this.localClassesNames[message.cnnModelHub.dataset]) {\n            try {\n                const model = await this.loadCnnModel(message.cnnModelHub.url)\n                const classNames = await this.loadClassNames(message.cnnModelHub.dataset)\n                const settings: TensorFlowHubModelNotification = {...message, classNames}\n                this.updateSetting(settings)\n                this.notify(model)\n            } catch (e) {\n                console.warn(\"Unable update cnn settings: \", e)\n            }\n\n        }\n\n    }\n\n    private classNameUrlsNotification(notification: ClassNameUrlsNotification) {\n\n        this.localClassesNames = notification.urls\n\n        console.log(\"local Classes Names\", this.localClassesNames)\n\n    }\n\n    private async loadLocalCnn(notification: LocalModelInputNotification) {\n        console.log(\"notification\", notification)\n\n\n        const data = await ConvolutionalNeuralNetworkSettings.xmlRequest(notification.url, \"arraybuffer\")\n\n\n        const zipDir = await JSZIP.loadAsync(data)\n\n        await this.loadLocalSettings(zipDir)\n\n        const model = await this.loadLocalModel(zipDir)\n\n\n        this.notify(model)\n\n\n    }\n\n    private RecoverySettingsPath(zipDir: JSZIP): string {\n        const zipFiles = Object.values(zipDir.files)\n\n        for (const file of zipFiles) {\n            if (file.dir) {\n                return file.name + \"settings.json\"\n            }\n        }\n        throw Error(\"Zip need to have root dir \")\n    }\n\n    private async loadLocalSettings(zipDir: JSZIP) {\n        const settingsPath = this.RecoverySettingsPath(zipDir)\n        console.log(settingsPath, zipDir)\n        const json = await zipDir.files[settingsPath].async(\"text\")\n\n        const settings: TensorFlowHubModelNotification = {\n            ...JSON.parse(json),\n            type: NotificationTypes.TensorFlowHubModelNotification,\n            id: USER_INTERFACE_COMMUNICATION_ID\n        }\n\n        this.updateSetting(settings)\n        zipDir.remove(settingsPath)\n\n        console.log(\"Zip files\", zipDir.files)\n    }\n\n    private async loadLocalModel(zipDir: JSZIP) {\n\n        const files = await this.zipFilesToFiles(zipDir.files)\n\n        console.log(zipDir, files)\n\n        return await tf.loadGraphModel(tf.io.browserFiles(files))\n    }\n\n    private async zipFilesToFiles(zipFiles: { [key: string]: JSZIP.JSZipObject }): Promise<Array<File>> {\n\n        const files = new Array<File>()\n\n        let jsonFile = null\n        for (const zipFile of Object.values(zipFiles)) {\n            if (zipFile.dir) {\n                continue\n            }\n            const blob = await zipFile.async(\"blob\")\n            const file = new File([blob], zipFile.name)\n            if (zipFile.name.indexOf(\"model.json\") !== -1) {\n                jsonFile = file\n            } else {\n                files.push(file)\n            }\n\n        }\n\n        return [jsonFile, ...files]\n    }\n\n\n    private notify(cnnModel: tf.GraphModel) {\n\n        console.log(\"notificando  observers\", this.currentSettings, \"CNN Model\", cnnModel)\n\n        this.notifyCnn(cnnModel)\n\n        // this.notifyLoadImage(cnnModel)\n\n        this.notifyUserInterface()\n\n    }\n\n    private async loadClassNames(dataset: string): Promise<ClassNames> {\n\n\n        if (this.needToLoadClassNames(dataset)) {\n            const json = await ConvolutionalNeuralNetworkSettings.xmlRequest(this.localClassesNames[dataset])\n            return JSON.parse(json)\n        } else {\n            return this.currentSettings.classNames\n        }\n\n    }\n\n\n    private needToLoadModel(url: string): boolean {\n        if (!url) {\n            return false\n        }\n\n        if (!this.currentSettings) {\n            return true\n        }\n\n        if (!this.currentSettings.cnnModelHub) {\n            return true\n        }\n\n        return this.currentSettings.cnnModelHub.url !== url\n\n    }\n\n    private needToLoadClassNames(dataset: string) {\n        if (!dataset) {\n            return false\n        }\n\n        if (!this.currentSettings) {\n            return true\n        }\n\n        if (!this.currentSettings.cnnModelHub.dataset) {\n            return true\n        }\n\n        return this.currentSettings.cnnModelHub.dataset !== dataset\n    }\n\n    private updateSetting(settings: TensorFlowHubModelNotification) {\n\n        const enables = settings.enables ? settings.enables : Object.values(settings.classNames).map(() => true)\n        const oldSettings = this.currentSettings ? this.currentSettings : {}\n\n        console.log(\"updateSetting\", settings, oldSettings)\n        this.currentSettings = {...oldSettings, ...settings, enables}\n    }\n\n    private notifyLoadImage(cnnModel: tf.GraphModel) {\n        if (!cnnModel) {\n            return\n        }\n\n        const shape = [...cnnModel.inputs[0].shape]\n\n        if (!shape) {\n            throw Error(`Shape is undefined ${shape}`)\n        }\n\n        console.log(\"Shape of Model : \", shape)\n\n        const notification: InputShapeNotification = {\n            type: NotificationTypes.InputShapeNotification,\n            shape: shape.splice(1, shape.length)\n        }\n\n        this.subject.next(notification)\n\n    }\n\n    private notifyCnn(cnnModel: tf.GraphModel) {\n        const cnnMessage: CnnModelSettingNotification = {\n            id: \"ConvolutionalNeuralNetworkSettings\",\n            type: NotificationTypes.CnnModelSettingNotification,\n            cnnModel,\n            classNames: this.currentSettings.classNames,\n            enables: this.currentSettings.enables\n        }\n        this.subject.next(cnnMessage)\n\n    }\n\n    private notifyUserInterface() {\n        this.subject.next(this.currentSettings)\n    }\n}\n","import * as tf from \"@tensorflow/tfjs\"\nimport {ClassNames} from \"../../interfaces/class-names\"\n\nimport {\n    CnnModelSettingNotification,\n    FilterNotification,\n    ImageNotification,\n    Notification,\n    NotificationTypes\n} from \"../../interfaces/notifications\"\n\nimport Module from \"../../../utils/module\"\n\n\nexport class ConvolutionalNeuralNetwork extends Module<Notification, Notification> {\n\n    private classNames: ClassNames\n    private model: tf.GraphModel\n    private enables: Array<boolean>\n    private predict = {[0]: \"not show\", [1]: \"show\"}\n\n\n    constructor() {\n        super()\n\n    }\n\n    error(e): void {\n\n    }\n\n    complete(): void {\n\n    }\n\n    next(message: Notification) {\n\n        if (message.type === NotificationTypes.ImageNotification) {\n            return this.imageNotification(message as ImageNotification)\n        }\n\n        if (message.type === NotificationTypes.CnnModelSettingNotification) {\n            return this.settingsNotification(message as CnnModelSettingNotification)\n        }\n\n    }\n\n    private imageNotification(message: ImageNotification) {\n\n        const outputMessage: FilterNotification = {\n            type: NotificationTypes.FilterNotification,\n            id: message.id,\n            predict: this.predict[1],\n            imgSrc: message.img.src\n        }\n\n        if (this.dontNeedToPredict()) {\n            this.subject.next(outputMessage)\n            return\n        }\n\n        this.startToPredict(message.img)\n            .then((pred: string) => {\n                console.log(\"CNN pred:\", pred)\n                outputMessage.predict = pred\n                this.subject.next(outputMessage)\n            })\n    }\n\n    private dontNeedToPredict(): boolean {\n        if (!this.model) {\n            return true\n        }\n\n        return this.enables.reduce(((previousValue, currentValue) => previousValue && currentValue))\n\n    }\n\n    private settingsNotification(message: CnnModelSettingNotification) {\n        if (message.cnnModel) {\n            this.model = message.cnnModel\n        }\n        if (message.classNames) {\n            this.classNames = message.classNames\n        }\n        if (message.enables) {\n            this.enables = message.enables\n        }\n\n\n    }\n\n\n    private async getTheBestClass(logIts: tf.Tensor): Promise<string> {\n        const {indices} = tf.topk(logIts, 1, true)\n        const argMax = await indices.data()\n\n        console.log(this.classNames[argMax[0]])\n        const pred = this.enables[argMax[0]] ? 1 : 0\n        return this.predict[pred]\n    }\n\n\n    protected async startToPredict(image: HTMLImageElement): Promise<string> {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                const logIts = tf.tidy(this.tinyFunction.bind(this, image))\n                resolve(this.getTheBestClass(logIts as tf.Tensor))\n            } catch (e) {\n                // console.error(\"Unable to execute tinyFunction\", e)\n                reject(e)\n            }\n\n\n        })\n    }\n\n\n    private tinyFunction(img: HTMLImageElement): tf.Tensor | tf.Tensor[] | tf.NamedTensorMap {\n\n        const shape = this.acceptableInputShape(this.model.inputs[0].shape)\n\n        const image = tf.browser.fromPixels(img).toFloat().resizeBilinear([shape[1], shape[2]])\n\n\n        const normalized = image.div(tf.scalar(255.0))\n\n        const batched = normalized.reshape([1, ...shape.slice(1, shape.length)])\n\n        return this.model.predict(batched)\n\n\n    }\n\n    /*\n por algum motivo alguns modelos do tensorHub possuem um input shape incoerente como: [-1,0,0,3],\n mas sabe-se que a priori todos os modelos do tensorHub  tem o mesmo input shape que é [1, 224, 224, 3]\n  */\n\n    private acceptableInputShape(inputShape: Array<number>): Array<number> {\n        const defaultShapeFromTensorHub = [1, 224, 224, 3]\n\n        if (inputShape === undefined) {\n            return defaultShapeFromTensorHub\n        }\n\n        if (inputShape.length !== 4) {\n            return defaultShapeFromTensorHub\n        }\n\n        if (inputShape[1] <= 0 || inputShape[2] <= 0) {\n            return defaultShapeFromTensorHub\n        }\n\n        return inputShape\n\n    }\n}\n\n","import {ImageNotification, Notification, NotificationTypes} from \"../../interfaces/notifications\"\nimport Module from \"../../../utils/module\"\n\n\nexport class LoadImage extends Module<Notification, Notification> {\n\n    constructor() {\n        super()\n    }\n\n    private static noTabError = new Error(\"Tab Not found\")\n    private shape = {min: 40}\n\n\n    private tabs: { [key: string]: string } = {}\n\n    private callbacks = {\n        [NotificationTypes.ImageSourceNotification]: this.imageSourceNotification.bind(this),\n    }\n\n    error(e): void {\n\n    }\n\n    complete(): void {\n\n    }\n\n    next(notification: Notification) {\n\n        if (this.callbacks[notification.type]) {\n            this.callbacks[notification.type](notification)\n        }\n\n    }\n\n    private imageSourceNotification(notification: Notification) {\n        if (notification.id === undefined) {\n            throw LoadImage.noTabError\n        }\n\n        const img = this.createDomElement(notification.message)\n        this.linkSourceToTab(img.src, notification.id)\n    }\n\n\n    private createDomElement(src: string): HTMLImageElement {\n        if (!src) {\n            return undefined\n        }\n\n        const img = document.createElement(\"img\")\n        img.addEventListener(\"error\", this.onError.bind(this))\n        img.addEventListener(\"load\", this.onLoad.bind(this))\n        img.src = src\n        return img\n    }\n\n    private linkSourceToTab(src: string, tabUUID: string) {\n        this.tabs[src] = tabUUID\n    }\n\n    private onError(event) {\n        delete this.tabs[event.target.src]\n\n    }\n\n    private onLoad(event) {\n        const imgTarget = (event.target as HTMLImageElement)\n        if ((imgTarget.height && imgTarget.height >= this.shape.min) || (imgTarget.width && imgTarget.width >= this.shape.min)) {\n            this.notify(imgTarget)\n            return\n        }\n\n    }\n\n    private getTabFromSource(src: string): string {\n        const tab = this.tabs[src]\n        if (!tab) {\n            throw Error(\"Tab Not found\")\n        }\n\n        return this.tabs[src]\n    }\n\n    notify(img: HTMLImageElement) {\n        const id = this.getTabFromSource(img.src)\n\n        this.subject.next({type: NotificationTypes.ImageNotification, id, img} as ImageNotification)\n        delete this.tabs[img.src]\n    }\n\n}\n","import {ClassNames} from \"./class-names\"\nimport * as tf from \"@tensorflow/tfjs\"\nimport {TensorflowHubModel} from \"./tensorflow-hub-model\"\n\nexport enum NotificationTypes {\n    Notification,\n    ImageSourceNotification,\n    ClassNameUrlsNotification,\n    ImageNotification,\n    FilterNotification,\n    ContentNotification,\n    CnnModelSettingNotification,\n    TensorFlowHubModelNotification,\n    InputShapeNotification,\n    LocalModelInputNotification\n}\n\nexport interface Notification {\n    id?: string\n    type: number\n    message?: string\n}\n\nexport interface ImageNotification extends Notification {\n    type: NotificationTypes.ImageNotification\n    img: HTMLImageElement,\n}\n\n\nexport interface FilterNotification extends Notification {\n    type: NotificationTypes.FilterNotification\n    predict: string\n    imgSrc: string\n}\n\nexport interface ContentNotification extends Notification {\n    type: NotificationTypes.ContentNotification\n    urlImages?: Array<string>\n    urlVideos?: Array<string>\n}\n\nexport interface CnnModelSettingNotification extends Notification {\n    type: NotificationTypes.CnnModelSettingNotification\n    cnnModel?: tf.GraphModel\n    classNames?: ClassNames\n    enables?: Array<boolean>\n}\n\nexport interface TensorFlowHubModelNotification extends Notification {\n    type: NotificationTypes.TensorFlowHubModelNotification\n    cnnModelHub: TensorflowHubModel\n    classNames?: ClassNames\n    enables?: Array<boolean>\n}\n\nexport interface InputShapeNotification extends Notification {\n    type: NotificationTypes.InputShapeNotification\n    shape: Array<number>\n}\n\nexport interface ClassNameUrlsNotification extends Notification {\n    type: NotificationTypes.ClassNameUrlsNotification\n    urls: { [key: string]: string }\n}\n\nexport interface LocalModelInputNotification extends Notification {\n    type: NotificationTypes.LocalModelInputNotification\n    url: string\n}\n\n","import { Component, OnInit } from \"@angular/core\"\n\n@Component({\n  selector: \"app-nav-bar\",\n  templateUrl: \"./nav-bar.component.html\",\n  styleUrls: [\"./nav-bar.component.css\"]\n})\nexport class NavBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- Toolbar -->\n\n\n<nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top rounded-bottom\" style=\"position: sticky\">\n  <a class=\"navbar-brand\" routerLink=\"\">\n    <img id=\"logo\" src=\"assets/app-component/deep-learning-light.png\" width=\"75\" height=\"45\"\n         class=\"d-inline-block align-top\" alt=\"\">\n    An chrome Extension\n  </a>\n\n  <div class=\"navbar-nav mr-auto \">\n\n    <div class=\"nav-item\">\n\n      <div style=\"width: 50%\">\n        <a class=\" nav-link\" routerLink=\"filters\"> Filters</a>\n      </div>\n\n      <div style=\"width: 50%\">\n        <a class=\" nav-link\" routerLink=\"models\">Models</a>\n      </div>\n\n    </div>\n\n  </div>\n\n</nav>\n","import {Injectable} from \"@angular/core\"\nimport {LocalModelInputNotification, Notification, NotificationTypes, TensorFlowHubModelNotification} from \"../../interfaces/notifications\"\nimport {TensorflowHubModel} from \"../../interfaces/tensorflow-hub-model\"\nimport {UserInterfaceCommunication} from \"../../../utils/user-interface-communication\"\nimport {ChromeUserInterfaceCommunication} from \"./chrome-browser/chrome-user-interface-communication\"\nimport Module from \"../../../utils/module\"\nimport {Observer} from \"rxjs\"\n\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class BrowserUserInterfaceService extends Module<Notification, Notification> {\n\n    private readonly browser: UserInterfaceCommunication<Notification, Notification>\n\n    private currentCnnModelSettings: TensorFlowHubModelNotification\n\n    constructor() {\n        super()\n        console.log(\"create User Interface Communication\")\n        this.browser = BrowserUserInterfaceService.selectBrowserUserInterfaceCommunication()\n        this.addObserver(this.browser)\n        this.browser.tryToStart()\n    }\n\n    private callbacks = {\n        [NotificationTypes.TensorFlowHubModelNotification]: this.browserNotification.bind(this)\n    }\n\n\n    private static selectBrowserUserInterfaceCommunication(): UserInterfaceCommunication<Notification, Notification> {\n        if (chrome) {\n            return new ChromeUserInterfaceCommunication()\n        } else {\n            throw new Error(\"Not implemented\")\n        }\n\n    }\n\n\n    selectTensorHubModel(cnnModel: TensorflowHubModel) {\n\n        const newNotification: TensorFlowHubModelNotification = {...this.currentCnnModelSettings, cnnModelHub: cnnModel}\n        this.browser.sendNotification(newNotification)\n\n    }\n\n    selectLocalModel(url: string) {\n        const notification: LocalModelInputNotification = {type: NotificationTypes.LocalModelInputNotification, url}\n        this.browser.sendNotification(notification)\n    }\n\n    changeFilterStatus(index: number) {\n        const newNotification: TensorFlowHubModelNotification = {...this.currentCnnModelSettings}\n        newNotification.enables[index] = !newNotification.enables[index]\n        this.browser.sendNotification(newNotification)\n    }\n\n\n    next(notification: Notification): void {\n\n        console.log(this.callbacks)\n\n\n        if (this.callbacks[notification.type]) {\n            this.callbacks[notification.type](notification)\n        }\n\n    }\n\n    error(e: any): void {\n\n    }\n\n    complete(): void {\n\n    }\n\n    addCnnModelSettingsObserver(observer: Observer<TensorFlowHubModelNotification>) {\n        this.subject.subscribe(observer)\n        this.notifyAll()\n    }\n\n\n    private browserNotification(notification: TensorFlowHubModelNotification) {\n        console.log(\"browser user interface browserNotification: \", notification)\n        this.currentCnnModelSettings = notification\n\n        this.notifyAll()\n    }\n\n    private notifyAll() {\n        console.log(\"call User interface notifyAll\", this.currentCnnModelSettings)\n        if (this.currentCnnModelSettings) {\n            this.subject.next(this.currentCnnModelSettings)\n        } else {\n            this.browser.getCnnModelSettingsFromBackground()\n        }\n    }\n\n\n}\n","import {Notification, NotificationTypes, TensorFlowHubModelNotification} from \"../../../interfaces/notifications\"\nimport {USER_INTERFACE_COMMUNICATION_ID, UserInterfaceCommunication} from \"../../../../utils/user-interface-communication\"\nimport {GET_CURRENT_SETTINGS_MESSAGE} from \"../../../background-page/background-communication/chrome-browser/chrome-background-communication\"\nimport Port = chrome.runtime.Port\n\nexport class ChromeUserInterfaceCommunication extends UserInterfaceCommunication <Notification, Notification> {\n\n  private port: Port\n\n  constructor() {\n    super()\n  }\n\n  checkPermissions(): void {\n    if (!chrome.extension || !chrome.runtime) {\n      throw Error(\"Unable to connect to background-page script\")\n    }\n  }\n\n  complete(): void {\n  }\n\n  error(e): void {\n  }\n\n  next(notification: Notification): void {\n  }\n\n  tryToStart(): void {\n    this.checkPermissions()\n    chrome.runtime.onMessage.addListener(this.listener.bind(this))\n    this.port = chrome.runtime.connect({name: USER_INTERFACE_COMMUNICATION_ID})\n    this.port.onMessage.addListener(this.listener.bind(this))\n\n\n  }\n\n\n  sendNotification(tensorflowHubModel: TensorFlowHubModelNotification): void {\n\n    this.port.postMessage(tensorflowHubModel)\n  }\n\n  private listener(message: Notification) {\n    this.subject.next(message)\n\n  }\n\n  getCnnModelSettingsFromBackground() {\n    this.port.postMessage({\n      message: GET_CURRENT_SETTINGS_MESSAGE,\n      type: NotificationTypes.Notification\n    } as Notification)\n  }\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: true\n}\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from \"@angular/core\"\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\"\n\nimport { AppModule } from \"./app/app.module\"\nimport { environment } from \"./environments/environment\"\n\nif (environment.production) {\n  enableProdMode()\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err))\n","import Module from \"./module\"\n\n\nexport abstract class BrowserCommunication<I, O> extends Module<I, O> {\n\n  abstract tryToStart(): void\n\n  abstract checkPermissions(): void\n\n\n}\n\n","import {Observer, Subject, Subscription} from \"rxjs\"\n\n\nexport default abstract class Module<I, O> {\n\n  subject = new Subject<O>()\n\n  observer: Observer<I> = {\n    next: this.next.bind(this),\n    error: this.error.bind(this),\n    complete: this.complete.bind(this),\n  }\n\n  protected subscriptions: Array<Subscription> = new Array<Subscription>()\n\n  protected abstract next(notification: I): void\n\n  protected abstract error(e): void\n\n  protected abstract complete(): void\n\n  addObserver(abstractModule: Module<any, I>) {\n    this.subscriptions.push(abstractModule.subject.subscribe(this.observer))\n  }\n\n  unsubscribe() {\n    for (const sub of this.subscriptions) {\n      sub.unsubscribe()\n    }\n  }\n\n}\n\n","import {BrowserCommunication} from \"./browser-communication\"\nimport {Notification} from \"../app/interfaces/notifications\"\n\nexport const USER_INTERFACE_COMMUNICATION_ID = \"UserInterfaceCommunication\"\n\nexport abstract class UserInterfaceCommunication<I, O> extends BrowserCommunication<I, O> {\n\n\n    abstract sendNotification(notification: Notification): void\n\n    abstract getCnnModelSettingsFromBackground(): void\n\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":"webpack:///"}